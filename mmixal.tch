@x [0]
\input pdfwebtocfront

@y
@z

@x [11]
\<primary expression>\is\<constant>\mid\<symbol>\mid\<local operand>\mid
  \.{@@}\mid\cr
\hskip12pc\.(\<expression>\.)\mid\<unary operator>\<primary expression>\cr
@y
\<primary expression>\is\<constant>\mid\<symbol>\mid\<local operand>\cr
\hskip12pc\mid\.{@@}\mid\.(\<expression>\.)\cr
\hskip12pc\mid\<unary operator>\<primary expression>\cr
@z
@x [11]
Binary operators come in two flavors, strong and weak. The strong ones
@y
\break
Binary operators come in two flavors, strong and weak. The strong ones
@z

@x [13]
@ We noted earlier that each \MMIXAL\ instruction contains
@y
@r @ We noted earlier that each \MMIXAL\ instruction contains
@z

@x [17]
\bull \<label> \.{OCTA} \<expression list>
@y
\vskip1in
\bull \<label> \.{OCTA} \<expression list>
@z

@x [18]
Here's how it works: Whenever a memory operation such as
@y
\break
Here's how it works: Whenever a memory operation such as
@z

@x [22]
@(mmix-lop.h@>=
@y
@-MMIX_LOP_H@>
@(mmix-lop.h@>=
@z

@x [23]
00fe0000&(\.{WYDE} \.{a-\$0})\cr
@y
00fe0000&(\.{WYDE} \.{a-\$0})\cr
}$$
\vfill\eject\null\vskip-.5in
$$
\halign{\hskip.5in\tt#&\quad#\hfil\cr
@z

@x [24]
\bull |lop_spec|: $\rm X=\Hex{08}$, $\rm YZ=type$. Begin special data of
@y
\vskip1in
\bull |lop_spec|: $\rm X=\Hex{08}$, $\rm YZ=type$. Begin special data of
@z
@x [24]
#endif /* |MMIX_LOP_H| */
@y
#endif /* |MMIX_LOP_H| */
@-MMIX_LOP_H@>
@z

@x [28]
the remainder in~|aux|.
@y
the remainder in~|aux|.
@-y@> @-z@>
@z

@x [31]
@<Prototypes@>=
@y
@-flush_listing_line@>
@-update_listing_loc@>
@-listing_clear@>
@-report_error@>
@-mmo_clear@>
@-mmo_out@>
@-mmo_tetra@>
@-mmo_byte@>
@-mmo_lop@>
@-mmo_lopp@>
@-mmo_loc@>
@-mmo_sync@>
@-assemble@>
@-new_trie_node@>
@-trie_search@>
@-new_sync_mode@>
@-prune@>
@-out_stab@>
@<Prototypes@>=
@z

@x [45]
@d err(m,...) {@+sprintf(err_buf,@[m @,@, __VA_OPT__(,) @,@, __VA_ARGS__@]);
@y
@-__VA_OPT__@> @-__VA_ARGS__@>
@d err(m,...) {@+sprintf(err_buf,@[m @,@, __VA_OPT__(,) @,@, __VA_ARGS__@]);
@z

@x [47]
@d mmo_write(buf) if (fwrite(buf,1,4,obj_file)!=4)
@y
@d mmo_write(buf) if (fwrite(buf,1,4,obj_file)!=4)
@-buf@>
@z

@x [48]
void mmo_tetra( /* output a tetrabyte */
@y
@-mmo_tetra@>
void mmo_tetra( /* output a tetrabyte */
@z
@x [48]
void mmo_lop( /* output a loader operation */
@y
@-mmo_lop@>
void mmo_lop( /* output a loader operation */
@z
@x [48]
void mmo_lopp( /* output a loader operation with two-byte operand */
@y
@-mmo_lopp@>
void mmo_lopp( /* output a loader operation with two-byte operand */
@z

@x [52]
@ Here is a basic subroutine that assembles |k| bytes starting at |cur_loc|.
@y
@r @ Here is a basic subroutine that assembles |k| bytes starting at |cur_loc|.
@z

@x [57]
@ The |trie_search| subroutine starts at a given node of the trie and finds
@y
@r @ The |trie_search| subroutine starts at a given node of the trie and finds
@z
@x [57]
@d isletter(c) (isalpha(c)||c=='_'||c==':'||(unsigned int)(c)>126)
@y
@d isletter(c) (isalpha(c)||c=='_'||c==':'||(unsigned int)(c)>126)
@-c@>
@z

@x [59]
  register sym_node *p=sym_avail;
@y
  @+ register sym_node *p=sym_avail;
@z
@x [59]
    p=next_sym_node;
    if (p==last_sym_node) {
@y
    if ((p=next_sym_node)==last_sym_node) {
@z

@x [63]
{"FUN", 0x02, 0x240a8},
@y
{"FUN", 0x02, 0x240a8},@|
@z
@x [63]
{"FEQL", 0x03, 0x240a8},@|
@y
{"FEQL", 0x03, 0x240a8},
@z
@x [63]
{"FIX", 0x05, 0x26288},
@y
{"FIX", 0x05, 0x26288},@|
@z
@x [63]
{"FIXU", 0x07, 0x26288},@|
@y
{"FIXU", 0x07, 0x26288},
@z
@x [63]
{"FLOT", 0x08, 0x26282},
@y
{"FLOT", 0x08, 0x26282},@|
@z
@x [63]
{"FUNE", 0x12, 0x240a8},
@y
{"FUNE", 0x12, 0x240a8},@|
@z
@x [73]
{"FEQLE", 0x13, 0x240a8},@|
@y
{"FEQLE", 0x13, 0x240a8},
@z
@x [63]
{"FSQRT", 0x15, 0x26288},
@y
{"FSQRT", 0x15, 0x26288},@|
@z
@x [63]
{"FINT", 0x17, 0x26288},@|
@y
{"FINT", 0x17, 0x26288},
@z
@x [63]
{"MUL", 0x18, 0x240a2},
@y
{"MUL", 0x18, 0x240a2},@|
@z
@x [63]
{"SUB", 0x24, 0x240a2},
@y
{"SUB", 0x24, 0x240a2},@|
@z
@x [63]
{"SUBU", 0x26, 0x240a2},@|
@y
{"SUBU", 0x26, 0x240a2},
@z
@x [63]
{"4ADDU", 0x2a, 0x240a2},
@y
{"4ADDU", 0x2a, 0x240a2},@|
@z
@x [63]
{"16ADDU", 0x2e, 0x240a2},@|
@y
{"16ADDU", 0x2e, 0x240a2},
@z
@x [63]
{"CMP", 0x30, 0x240a2},
@y
{"CMP", 0x30, 0x240a2},@|
@z
@x [63]
{"SR", 0x3c, 0x240a2},
@y
{"SR", 0x3c, 0x240a2},@|
@z
@x [63]
{"SRU", 0x3e, 0x240a2},@|
@y
{"SRU", 0x3e, 0x240a2},
@z
@x [63]
{"BZ", 0x42, 0x22081},
@y
{"BZ", 0x42, 0x22081},@|
@z
@x [63]
{"BOD", 0x46, 0x22081},@|
@y
{"BOD", 0x46, 0x22081},
@z
@x [63]
{"BNN", 0x48, 0x22081},
@y
{"BNN", 0x48, 0x22081},@|
@z
@x [63]
{"PBP", 0x54, 0x22081},
@y
{"PBP", 0x54, 0x22081},@|
@z
@x [63]
{"PBOD", 0x56, 0x22081},@|
@y
{"PBOD", 0x56, 0x22081},
@z
@x [63]
{"PBNZ", 0x5a, 0x22081},
@y
{"PBNZ", 0x5a, 0x22081},@|
@z
@x [63]
{"PBEV", 0x5e, 0x22081},@|
@y
{"PBEV", 0x5e, 0x22081},
@z
@x [63]
{"CSN", 0x60, 0x240a2},
@y
{"CSN", 0x60, 0x240a2},@|
@z
@x [63]
{"CSNP", 0x6c, 0x240a2},
@y
{"CSNP", 0x6c, 0x240a2},@|
@z
@x [63]
{"CSEV", 0x6e, 0x240a2},@|
@y
{"CSEV", 0x6e, 0x240a2},
@z
@x [63]
{"ZSZ", 0x72, 0x240a2},
@y
{"ZSZ", 0x72, 0x240a2},@|
@z
@x [63]
{"ZSOD", 0x76, 0x240a2},@|
@y
{"ZSOD", 0x76, 0x240a2},
@z
@x [63]
{"ZSNN", 0x78, 0x240a2},
@y
{"ZSNN", 0x78, 0x240a2},@|
@z
@x [63]
{"LDW", 0x84, 0xa60a2},
@y
{"LDW", 0x84, 0xa60a2},@|
@z
@x [63]
{"LDWU", 0x86, 0xa60a2},@|
@y
{"LDWU", 0x86, 0xa60a2},
@z
@x [63]
{"LDTU", 0x8a, 0xa60a2},
@y
{"LDTU", 0x8a, 0xa60a2},@|
@z
@x [63]
{"LDOU", 0x8e, 0xa60a2},@|
@y
{"LDOU", 0x8e, 0xa60a2},
@z
@x [63]
{"LDSF", 0x90, 0xa60a2},
@y
{"LDSF", 0x90, 0xa60a2},@|
@z
@x [63]
{"PREGO", 0x9c, 0xa6022},
@y
{"PREGO", 0x9c, 0xa6022},@|
@z
@x [63]
{"GO", 0x9e, 0xa60a2},@|
@y
{"GO", 0x9e, 0xa60a2},
@z
@x [63]
{"STBU", 0xa2, 0xa60a2},
@y
{"STBU", 0xa2, 0xa60a2},@|
@z
@x [63]
{"STWU", 0xa6, 0xa60a2},@|
@y
{"STWU", 0xa6, 0xa60a2},
@z
@x [63]
{"STT", 0xa8, 0xa60a2},
@y
{"STT", 0xa8, 0xa60a2},@|
@z
@x [63]
{"STCO", 0xb4, 0xa6022},
@y
{"STCO", 0xb4, 0xa6022},@|
@z
@x [63]
{"STUNC", 0xb6, 0xa60a2},@|
@y
{"STUNC", 0xb6, 0xa60a2},
@z
@x [63]
{"PUSHGO", 0xbe, 0xa6062},@|
@y
{"PUSHGO", 0xbe, 0xa6062},
@z
@x [63]
{"OR", 0xc0, 0x240a2},
@y
{"OR", 0xc0, 0x240a2},@|
@z
@x [63]
{"NAND", 0xcc, 0x240a2},
@y
{"NAND", 0xcc, 0x240a2},@|
@z
@x [63]
{"NXOR", 0xce, 0x240a2},@|
@y
{"NXOR", 0xce, 0x240a2},
@z
@x [63]
{"WDIF", 0xd2, 0x240a2},
@y
{"WDIF", 0xd2, 0x240a2},@|
@z
@x [63]
{"ODIF", 0xd6, 0x240a2},@|
@y
{"ODIF", 0xd6, 0x240a2},
@z
@x [63]
{"MUX", 0xd8, 0x240a2},
@y
{"MUX", 0xd8, 0x240a2},@|
@z
@x [63]
{"SETML", 0xe2, 0x22080},
@y
{"SETML", 0xe2, 0x22080},@|
@z
@x [63]
{"SETL", 0xe3, 0x22080},@|
@y
{"SETL", 0xe3, 0x22080},
@z
@x [63]
{"INCMH", 0xe5, 0x22080},
@y
{"INCMH", 0xe5, 0x22080},@|
@z
@x [63]
{"INCL", 0xe7, 0x22080},@|
@y
{"INCL", 0xe7, 0x22080},
@z
@x [63]
{"ORH", 0xe8, 0x22080},
@y
{"ORH", 0xe8, 0x22080},@|
@z
@x [63]
{"ANDNL", 0xef, 0x22080},@|
@y
{"ANDNL", 0xef, 0x22080},
@z
@x [63]
{"PUSHJ", 0xf2, 0x22041},
@y
{"PUSHJ", 0xf2, 0x22041},@|
@z
@x [63]
{"PUT", 0xf6, 0x22002},@|
@y
{"PUT", 0xf6, 0x22002},
@z
@x [63]
{"POP", 0xf8, 0x23000},
@y
{"POP", 0xf8, 0x23000},@|
@z
@x [63]
{"GET", 0xfe, 0x22080},
@y
{"GET", 0xfe, 0x22080},@|
@z
@x [63]
{"TRIP", 0xff, 0x27554},@|
@y
{"TRIP", 0xff, 0x27554},
@z

@x [69]
{"ROUND_OFF",0,1},
@y
{"ROUND_OFF",0,1},@|
@z
@x [69]
{"I_BIT",0,0x10},
@y
{"I_BIT",0,0x10},@|
@z
@x [69]
{"TextWrite",0,1},
@y
{"TextWrite",0,1},@|
@z

@x [73]
  bool useful=false;
@y
  @+ bool useful=false;
@z

@x [78]
@ The initial `\.:' of each fully qualified symbol is omitted here, since most
@y
@r @ The initial `\.:' of each fully qualified symbol is omitted here, since most
@z

@x [84]
@ @<Init...@>=
@y
@r @ @<Init...@>=
@z

@x [85]
p=operand_list;
@y
p=operand_list; @$p {MMIXAL}40 \&{register} \&{Char} ${*}$@>
@z

@x [89]
@ @<Scan a backward local@>=
@y
@r @ @<Scan a backward local@>=
@z

@x [93]
  p++; acc.l=0; err("*null string is treated as zero");
@y
  p++; @+ acc.l=0; @+ err("*null string is treated as zero");
@z

@x [100]
@ @d unary_check(verb) if (top_val.status!=pure)
@y
@ @-verb@> @d unary_check(verb) if (top_val.status!=pure)
@z

@x [101]
@ @d binary_check(verb)
@y
@ @-verb@>@d binary_check(verb)
@z

@x [104]
@ We copy the opcode field to a special buffer because we might
@y
@r @ We copy the opcode field to a special buffer because we might
@z

@x [107]
  j=(op_bits&align_bits)>>16;
@y
  j=(op_bits&align_bits)>>16; @$j {MMIXAL}136 \&{register} \&{int}@>
@z

@x [108]
  greg--;
@y
  greg--; @+
@z

@x [109]
  sym_node *new_link=DEFINED;
@y
  @+ sym_node *new_link=DEFINED;
@z
@x [109]
  }@+ else if (pp->link==PREDEFINED) pp->serial=++serial_number;
@y
  }@+ else @/ if (pp->link==PREDEFINED) pp->serial=++serial_number;
@z

@x [114]
@ @<Fix a future reference from a relative address@>=
@y
@ @$k {MMIXAL}136 \&{register} \&{int}@>
@<Fix a future reference from a relative address@>=
@z

@x [115]
@ @<Make special listing to show the label equivalent@>=
@y
@r @ @<Make special listing to show the label equivalent@>=
@z

@x [121]
@ @<Do the \9{z}Z field@>=
@y
@r @ @<Do the \9{z}Z field@>=
@z

@x [126]
@ @<Assemble \9{y}YZ as a relative address and |goto assemble_X|@>=
@y
@r @ @<Assemble \9{y}YZ as a relative address and |goto assemble_X|@>=
@z

@x [130
@ @<Assemble \9{x}XYZ as a future reference...@>=
@y
@r @ @<Assemble \9{x}XYZ as a future reference...@>=
@z

@x [136]
@#
@y
@z
@x [136]
@#
@y
@+@t}\6\4\4{@>
@z
@x [136]
  register int j,k; /* all-purpose integers */
@y
  @+ register int j,k; /* all-purpose integers */
@z

@x [146]
@* Index.

@y
@z
