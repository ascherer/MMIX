@x [0]
\input pdfwebtocfront
@y
\pdfpagewidth=\pagewidth \advance\pdfpagewidth by 1in
\pdfpageheight=\fullpageheight \advance\pdfpageheight by 1in
\ifpdflua \pdfhorigin=0.5in \pdfvorigin=0.5in
\else \global\pageshift=-0.5in
  \global\hoffset=-0.5in \global\voffset=-0.5in \fi

\ifx\undefined\eightpoint \let\ninepoint=\relax \else
{\eightpoint \let\ninett=\eighttt \editorsnote \vskip7mm}
\fi
@z

@x [1]
$$\vbox{\halign{\tt#\hfil\cr
@y
$$\begingroup\ninepoint
\vbox{\halign{\tt#\hfil\cr
@z
@x [1]
}}$$
@y
}}\endgroup$$
@z

@x [3]
\bull memchunksmax (default 1000), maximum number of $2^{16}$-byte chunks of
@y
\break
\bull memchunksmax (default 1000), maximum number of $2^{16}$-byte chunks of
@z

@x [6]
@ The fourth and final kind of specification defines a functional unit:
@y
@r @ The fourth and final kind of specification defines a functional unit:
@z
@x [6]
and the least significant bit is for opcode 255 (\.{TRIP}).
@y
and the least significant bit is for opcode~255~(\.{TRIP}).
@z
@x [6]
multiplication), a boolean unit (which handles only bitwise operations),
@y
multiplication), a~boolean unit (which handles only bitwise operations),
@z
@x [6]
$$\vbox{\halign{\tt#\hfil\cr
@y
$$\begingroup\ninepoint
\vbox{\halign{\tt#\hfil\cr
@z
@x [6]
}}$$
@y
}}\endgroup$$
@z

@x [8]
  va_list ap;
  va_start(ap, fmt);
  (void) vfprintf(stderr, fmt, ap);
  va_end(ap);@/
@y
  @+ va_list ap;
  va_start(ap, fmt); @+
  (void) vfprintf(stderr, fmt, ap); @+
  va_end(ap);@/
@z

@x [10]
  static char buffer[BUF_SIZE]; /* input lines go here */
@y
  @+ static char buffer[BUF_SIZE]; /* input lines go here */
@z

@x [15]
@ Most of the parameters are external variables declared in the header
@y
@ Most of the parameters are variables declared in the header
@z
@x [15]
{"mul4", mul4, 10},@|
@y
{"mul4", mul4, 10},
@z
@x [15]
{"fint", fint, 4},@|
@y
{"fint", fint, 4},
@z

@x [16]
read from the |CPV| table.)
@y
read from the |CPV| table.)
@-aa@> @-bb@> @-cc@> @-gg@> @-vv@>
@-repl@> @-vrepl@> @-mode@>
@-access_time@> @-copy_in_time@> @-copy_out_time@>
@-filler@> @-ctl@> @-filler_ctl@>
@-ptr_a@> @-go@>
@-flusher@> @-flusher_ctl@>
@-ports@> @-name@>
@z

@x [18]
@<Count and allocate the functional units@>=
@y
@-name@>
@-ops@>
@<Count and allocate the functional units@>=
@z

@x [21]
@ @<If |token| is a cache name, process a cache spec@>=
@y
@r @ @<If |token| is a cache name, process a cache spec@>=
@z

@x [22]
  pcs(Scache);@+continue;
}

@ @<Sub...@>=
@y
  pcs(Scache);@+continue;
}

@ @-ppol@> @% @$ppol {MMIX-CONFIG}22 \&{static} \&{void} (\,)@>
@<Sub...@>=
@z

@x [23]
  else token_prescanned=true; /* oops, we should rescan that token */
}

@ @<Sub...@>=
@y
  else token_prescanned=true; /* oops, we should rescan that token */
}

@ @-aa@> @-bb@> @-cc@> @-gg@> @-vv@>
@-access_time@> @-copy_in_time@> @-copy_out_time@>
@-mode@> @-ports@> @-repl@> @-vrepl@>
@<Sub...@>=
@z
@x [23]
static void pcs( /* subroutine to process a cache spec */
  cache *c)
{
@y
static void pcs(cache *c) /* subroutine to process a cache spec */
{ @+
@z

@x [24]
@ @<If |token| is an operation name, process a pipe spec@>=
@y
@ @$j {MMIX-CONFIG}38 \&{register} \&{int}@>
@$n {MMIX-CONFIG}38 \&{register} \&{int}@>
@<If |token| is an operation name, process a pipe spec@>=
@z

@x [25]
@ @<Process a functional spec@>=
@y
@ @-name@> @-ops@> @<Process a functional spec@>=
@z

@x [26]
@<Allocate coroutines in each functional unit@>=
@y
@-k@> @-co@> @-name@> @-stage@>
@<Allocate coroutines in each functional unit@>=
@z
@x [26]
  funit[j].k=n;
@y
  funit[j].k=n; @+
@z
@x [26]
    funit[j].co[i].name=funit[j].name;
@y
    funit[j].co[i].name=funit[j].name; @+
@z

@x [27]
@ @<Build table of pipeline stages needed for each opcode@>=
@y
@ @-div@> @-frem@> @-ld@> @-mul@> @-mul0@> @-mul8@> @-st@>
@<Build table of pipeline stages needed for each opcode@>=
@z
@x [27]
int_stages[mul]=n;
@y
int_stages[mul]=n; @+
@z

@x [28]
|fsub| by |fadd|, etc.
@y
|fsub| by |fadd|, etc.
@-add@> @-addu@> @-and@> @-andn@> @-bdif@> @-br@> @-cmp@> @-cmpu@>
@-cset@> @-div@> @-divu@> @-fadd@> @-fcmp@> @-fdiv@> @-feps@> @-fint@>
@-fix@> @-flot@> @-fmul@> @-frem@> @-fsqrt@> @-fsub@> @-funeq@> @-get@>
@-go@> @-ld@> @-mor@> @-mul@> @-mul0@> @-mul8@> @-mux@> @-nand@>
@-noop@> @-nor@> @-nxor@> @-odif@> @-or@> @-orn@> @-pbr@> @-pop@>
@-prego@> @-pushgo@> @-pushj@> @-put@> @-resume@> @-sadd@> @-save@> @-sh@>
@-st@> @-sub@> @-subu@> @-sync@> @-tdif@> @-trap@> @-trip@> @-unsave@>
@-wdif@> @-xor@> @-zset@>
@%
@$mul0 {MMIX-PIPE}49 =$\,0,\dots,\\{resum}=89$, \&{internal\_opcode}@>
@z

@x [29]
@ @<Determine the number of stages...@>=
@y
@ @-name@> @-ops@> @<Determine the number of stages...@>=
@z

@x [30]
themselves.
@y
themselves.
@-b@> @-bb@> @-lg@>
@z

@x [31]
static void alloc_cache(
@y
@-a@> @-aa@> @-b@> @-bb@> @-c@> @-cc@> @-g@> @-gg@> @-v@> @-vv@>
static void alloc_cache(
@z
@x [31]
  c->a=lg(c->aa);
  c->b=lg(c->bb);
  c->c=lg(c->cc);
  c->g=lg(c->gg);
  c->v=lg(c->vv);
@y
  c->a=lg(c->aa); @+
  c->b=lg(c->bb); @+
  c->c=lg(c->cc); @+
  c->g=lg(c->gg); @+
  c->v=lg(c->vv);
@z

@x [32]
@ @<Allocate the cache sets for cache |c|@>=
@y
@ @-aa@> @-bb@> @-cc@> @-g@>
@$c {MMIX-CONFIG}31 \&{cache} ${*}$@>
@<Allocate the cache sets for cache |c|@>=
@z

@x [33]
@ @<Allocate the victim cache for cache |c|@>=
@y
@ @-bb@> @-vv@> @-g@>
@% @$cacheset {MMIX-PIPE}167 \&{cacheblock} ${*}$@>
@<Allocate the victim cache for cache |c|@>=
@z

@x [34]
@ @<Allocate reader coroutines for cache |c|@>=
@y
@ @% @$coroutine {MMIX-PIPE}167 \&{struct}@>
@<Allocate reader coroutines for cache |c|@>=
@z

@x [35]
@ @<Allocate the caches@>=
@y
@ @-bb@> @-gg@>
@<Allocate the caches@>=
@z

@x [36]
@ Now we are nearly done. The only nontrivial task remaining is
@y
@r @ Now we are nearly done. The only nontrivial task remaining is
@z
@x [36]
scheduler and schedulee.
@y
scheduler and schedulee.
@-bb@> @-name@>
@$j {MMIX-CONFIG}38 \&{int}@>
@$n {MMIX-CONFIG}38 \&{int}@>
@z

@x [37]
@ @s chunknode int
@y
@ @s chunknode int
@-bb@>
@$l {MMIX-PIPE}86 \&{specnode} ${*}$@>
@%
@$specnode {MMIX-PIPE}40 \&{struct}@>
@$write_node {MMIX-PIPE}246 \&{struct}@>
@z

@x [39]
@(mmix-config.h@>=
@y
@-MMIX_CONFIG_H@>
@(mmix-config.h@>=
@z

@x [40]
@ @<Private prototypes@>=
@y
@ @% @$replace_policy {MMIX-PIPE}23 \&{enum}@>
@<Private prototypes@>=
@z

@x [41]
@*Index.
@y
@z
